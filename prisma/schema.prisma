// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}
//
//  model User {
//      id        String    @id @default(uuid())
//      
//      createdAt DateTime  @default(now())
//      updatedAt DateTime  @updatedAt
//
//      email     String    @unique
//      fullName  String?
//      password  String
//      role      Role      @default(USER)
//      isVerified Boolean?
//      email_token String?
//
//      orders    Order[]
//      refresh_token refresh_token[]
//  }

model User {
    id          String      @id @unique
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    fullName    String?
    email       String?      @unique
    email_verified Boolean?
    role        Role        @default(USER)
    orders      Order[]

    auth_session     Session[]
    key         Key[]
}

model Session {
    id              String           @id @unique
    user_id         String
    active_expires  BigInt
    idle_expires    BigInt
    user            User             @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([user_id])
}

model Key {
    id              String           @id @unique
    hashed_password String?
    user_id         String
    user            User             @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([user_id])
}


model Product {
    id                  String          @id @default(uuid())
    
    createdAt           DateTime        @default(now())
    updatedAt           DateTime        @updatedAt

    name                String          @unique
    description         String
    long_description    String          @db.Text
    price               Float
    stripeProductId     String
    image               String

    orderItems          OrderItem[]
}

model OrderItem {
    id              String          @id @default(uuid())

    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt


    quantity        Int
    Product         Product[]

    orderId         String
    Order           Order           @relation(fields: [orderId], references: [id])
}

enum status {
    pending
    processing
    completed
    cancelled
}

model Order {
    id              String          @id @default(uuid())

    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    
    userId          String?
    user            User?            @relation(fields: [userId], references: [id])
    
    orderItems      OrderItem[]
    orderStatus     status          @default(pending)
    
    address         String
    country         String
    city            String
    postalCode      String
    phone           String
    email           String
    FullName        String
}
